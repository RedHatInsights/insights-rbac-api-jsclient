/**
 * Role Based Access Control
 * The API for Role Based Access Control.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';
import Principal from '../model/Principal';
import PrincipalPagination from '../model/PrincipalPagination';

/**
* Principal service.
* @module api/PrincipalApi
* @version 1.0.0
*/
export default class PrincipalApi {

    /**
    * Constructs a new PrincipalApi. 
    * @alias module:api/PrincipalApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Get a principal in the tenant
     * @param {String} username Username of principal to get
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Principal} and HTTP response
     */
    getPrincipalWithHttpInfo(username) {
      let postBody = null;

      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling getPrincipal");
      }


      let pathParams = {
        'username': username
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basic_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Principal;

      return this.apiClient.callApi(
        '/principals/{username}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a principal in the tenant
     * @param {String} username Username of principal to get
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Principal}
     */
    getPrincipal(username) {
      return this.getPrincipalWithHttpInfo(username)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List the principals for a tenant
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PrincipalPagination} and HTTP response
     */
    listPrincipalsWithHttpInfo() {
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basic_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PrincipalPagination;

      return this.apiClient.callApi(
        '/principals/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List the principals for a tenant
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PrincipalPagination}
     */
    listPrincipals() {
      return this.listPrincipalsWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
