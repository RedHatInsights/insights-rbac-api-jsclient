/**
 * Role Based Access Control
 * The API for Role Based Access Control.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AccessPagination from '../model/AccessPagination';
import Error from '../model/Error';

/**
* Access service.
* @module api/AccessApi
* @version 1.0.0
*/
export default class AccessApi {

    /**
    * Constructs a new AccessApi. 
    * @alias module:api/AccessApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Get the permitted access for a principal in the tenant
     * @param {String} application The application name to obtain access for the principal
     * @param {Object} opts Optional parameters
     * @param {String} opts.username Unique username of the principal to obtain access for
     * @param {Number} opts.pageSize Parameter for selecting the amount of data in a page. (default to 10)
     * @param {Number} opts.page Parameter for selecting the page of data. (default to 1)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AccessPagination} and HTTP response
     */
    getPrincipalAccessWithHttpInfo(application, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'application' is set
      if (application === undefined || application === null) {
        throw new Error("Missing the required parameter 'application' when calling getPrincipalAccess");
      }


      let pathParams = {
      };
      let queryParams = {
        'application': application,
        'username': opts['username'],
        'page_size': opts['pageSize'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basic_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AccessPagination;

      return this.apiClient.callApi(
        '/access/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get the permitted access for a principal in the tenant
     * @param {String} application The application name to obtain access for the principal
     * @param {Object} opts Optional parameters
     * @param {String} opts.username Unique username of the principal to obtain access for
     * @param {Number} opts.pageSize Parameter for selecting the amount of data in a page. (default to 10)
     * @param {Number} opts.page Parameter for selecting the page of data. (default to 1)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AccessPagination}
     */
    getPrincipalAccess(application, opts) {
      return this.getPrincipalAccessWithHttpInfo(application, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
