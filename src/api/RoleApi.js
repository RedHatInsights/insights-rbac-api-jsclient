/**
 * Role Based Access Control
 * The API for Role Based Access Control.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';
import RoleIn from '../model/RoleIn';
import RolePagination from '../model/RolePagination';
import RoleWithAccess from '../model/RoleWithAccess';

/**
* Role service.
* @module api/RoleApi
* @version 1.0.0
*/
export default class RoleApi {

    /**
    * Constructs a new RoleApi. 
    * @alias module:api/RoleApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Create a roles for a tenant
     * @param {module:model/RoleIn} roleIn Role to create
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RoleWithAccess} and HTTP response
     */
    createRolesWithHttpInfo(roleIn) {
      let postBody = roleIn;

      // verify the required parameter 'roleIn' is set
      if (roleIn === undefined || roleIn === null) {
        throw new Error("Missing the required parameter 'roleIn' when calling createRoles");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basic_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RoleWithAccess;

      return this.apiClient.callApi(
        '/roles/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a roles for a tenant
     * @param {module:model/RoleIn} roleIn Role to create
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RoleWithAccess}
     */
    createRoles(roleIn) {
      return this.createRolesWithHttpInfo(roleIn)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a role in the tenant
     * @param {String} uuid ID of role to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteRoleWithHttpInfo(uuid) {
      let postBody = null;

      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling deleteRole");
      }


      let pathParams = {
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basic_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/roles/{uuid}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete a role in the tenant
     * @param {String} uuid ID of role to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteRole(uuid) {
      return this.deleteRoleWithHttpInfo(uuid)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a role in the tenant
     * @param {String} uuid ID of role to get
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RoleWithAccess} and HTTP response
     */
    getRoleWithHttpInfo(uuid) {
      let postBody = null;

      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling getRole");
      }


      let pathParams = {
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basic_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RoleWithAccess;

      return this.apiClient.callApi(
        '/roles/{uuid}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a role in the tenant
     * @param {String} uuid ID of role to get
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RoleWithAccess}
     */
    getRole(uuid) {
      return this.getRoleWithHttpInfo(uuid)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List the roles for a tenant
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageSize Parameter for selecting the amount of data in a page. (default to 10)
     * @param {Number} opts.page Parameter for selecting the page of data. (default to 1)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RolePagination} and HTTP response
     */
    listRolesWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'page_size': opts['pageSize'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basic_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RolePagination;

      return this.apiClient.callApi(
        '/roles/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List the roles for a tenant
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageSize Parameter for selecting the amount of data in a page. (default to 10)
     * @param {Number} opts.page Parameter for selecting the page of data. (default to 1)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RolePagination}
     */
    listRoles(opts) {
      return this.listRolesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a Role in the tenant
     * @param {String} uuid ID of role to update
     * @param {module:model/RoleWithAccess} roleWithAccess Update to a Role
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    updateRoleWithHttpInfo(uuid, roleWithAccess) {
      let postBody = roleWithAccess;

      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling updateRole");
      }

      // verify the required parameter 'roleWithAccess' is set
      if (roleWithAccess === undefined || roleWithAccess === null) {
        throw new Error("Missing the required parameter 'roleWithAccess' when calling updateRole");
      }


      let pathParams = {
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basic_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/roles/{uuid}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update a Role in the tenant
     * @param {String} uuid ID of role to update
     * @param {module:model/RoleWithAccess} roleWithAccess Update to a Role
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    updateRole(uuid, roleWithAccess) {
      return this.updateRoleWithHttpInfo(uuid, roleWithAccess)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
